#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Fri Jan 24 12:00:10 2020

@author: Hauke Wernecke
"""

# standard libs

# third-party libs
from PyQt5.QtWidgets import QAbstractItemView

# local modules/libs
from ui.ui_batch_dialog import Ui_batch

class UIBatch(Ui_batch):
    """used to extend the normal class, which is generated by qt designer.
    Methods can be added (like set_all) or connections etc can be made without
    handling the normal generated class, which is overridden whenever the gui
    is changed"""


    ### Properties

    # Interface for the batchfile.
    # TODO: To be evaluated.
    @property
    def batchFile(self):
        """batchFile getter"""
        return self.foutCSV.text()

    @batchFile.setter
    def batchFile(self, filename:str):
        """batchFile setter"""
        self.foutCSV.setText(filename)


    ### Methods

    def __init__(self, parent):
        self.parent = parent
        self.setupUi(self.parent)

        # Disable option to edit the strings in the file list.
        self.listFiles.setEditTriggers(QAbstractItemView.NoEditTriggers)

        self.__post_init__()


    def __post_init__(self):
        # Setup Events
        self.set_connections()


    def set_connections(self):
        """set the connections (functions/methods which are executed when
        something is clicked/..."""
        # Properties
        # self.cbUpdatePlots.stateChanged.connect(self.set_prop_updatePlots)
        # click/valueChanged connections
        self.listFiles.currentRowChanged.connect(self.parent.open_indexed_file)
        self.btnSetFilename.clicked.connect(self.parent.specify_batchfile)
        self.btnBrowse.clicked.connect(self.parent.browse_spectra)
        self.btnClear.clicked.connect(self.parent.reset_files)
        self.btnCalculate.clicked.connect(self.parent.multi_calc)
        self.btnSelectAll.clicked.connect(self.set_all)
        # Update the UI whenever a parameter button is toggled.
        self.BtnParameters.buttonToggled.connect(self.parent.enable_analysis)
        self.foutCSV.textChanged.connect(self.parent.enable_analysis)
        # self.listFiles.itemSelectionChanged.connect(self.parent.enable_analysis)


    def get_update_plots(self):
        return self.cbUpdatePlots.isChecked()

    def get_fileselection(self)->int:
        return self.listFiles.currentRow()

    def set_fileselection(self, index):
        return self.listFiles.setCurrentRow(index)



    def set_all(self):
        """
        Checks all buttons of the parameter group.

        Set all buttons in the group, independent if more buttons are
        added or some are deleted.
        """

        for button in self.BtnParameters.buttons():
            button.setChecked(True)


    ## Connect methods

    def connect_browse_files(self, fun):
        """Interface to connect fun to clicked signal of the button."""
        self.btnBrowse.clicked.connect(fun)


    def connect_calculate(self, fun):
        """Interface to connect fun to clicked signal of the button."""
        self.btnCalculate.clicked.connect(fun)


    def connect_clear(self, fun):
        """Interface to connect fun to clicked signal of the button."""
        self.btnClear.clicked.connect(fun)


    def connect_select_file(self, fun):
        """Interface to connect fun to clicked signal of the button."""
        self.listFiles.clicked.connect(fun)


    def connect_set_filename(self, fun):
        """Interface to connect fun to clicked signal of the button."""
        self.btnSetFilename.clicked.connect(fun)

    def update_progressbar(self, percentage:[int, float]):
        """
        Convert the percentage and sets the value to the progress bar.

        Parameters
        ----------
        percentage : float
            The percentage.

        Returns
        -------
        int
            The percent calculated and set.

        """

        # TODO: separate ui and logic? Put this method into BatchUI?
        percent = int(percentage*100);
        self.barProgress.setValue(percent);
        return percent;


